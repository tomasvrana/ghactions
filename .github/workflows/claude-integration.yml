name: Claude Integration

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  process-request:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get context
        id: context
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue ? context.payload.issue.body : context.payload.comment.body;
            core.setOutput('comment', body);

      - name: Call Anthropic API
        id: claude
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ISSUE_BODY: ${{ steps.context.outputs.comment }}
        with:
          script: |
            try {
              console.log('Issue body:', process.env.ISSUE_BODY);  // Debug log
              const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                  'x-api-key': process.env.ANTHROPIC_API_KEY,
                  'anthropic-version': '2023-06-01',
                  'content-type': 'application/json'
                },
                body: JSON.stringify({
                  model: 'claude-3-5-sonnet-20241022',
                  system: 'You are processing GitHub repository updates. Create or modify files based on the user request. Respond with a JSON object containing file paths and their content. Example response format: {"index.html": "<html><body><h1>Hello World</h1></body></html>"}',
                  messages: [
                    {
                      role: 'user',
                      content: process.env.ISSUE_BODY
                    }
                  ],
                  max_tokens: 4096
                })
              });
              
              const data = await response.json();
              if (data.error) {
                throw new Error(data.error.message);
              }
              
              core.setOutput('result', JSON.stringify(data.content[0].text));
              console.log('API Response:', data.content[0].text);
            } catch (error) {
              core.setFailed(`API call failed: ${error.message}`);
              console.log('Error details:', error);
            }

      - name: Create new branch
        run: |
          BRANCH_NAME="update/claude-$(date +%s)"
          git checkout -b $BRANCH_NAME
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Process Claude's response and create files
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const responseText = JSON.parse(core.getOutput('result'));
              const files = JSON.parse(responseText);
              
              const fs = require('fs').promises;
              
              for (const [path, content] of Object.entries(files)) {
                await fs.writeFile(path, content);
                console.log(`Created/updated file: ${path}`);
              }
            } catch (error) {
              core.setFailed(`Failed to process response: ${error.message}`);
              console.log('Error details:', error);
            }

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Update from Claude based on issue #${{ github.event.issue.number }}"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Update from Claude',
                body: `Automated updates based on issue #${context.issue.number}`,
                head: process.env.BRANCH_NAME,
                base: context.payload.repository.default_branch
              });
              
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `Created PR: ${pr.data.html_url}\n\nPlease review the changes and let me know if you'd like any adjustments.`
              });
            } catch (error) {
              core.setFailed(`Failed to create PR: ${error.message}`);
            }
